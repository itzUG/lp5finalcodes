import time
import random

# Timer to keep track of performance
start = time.perf_counter()

# A function to implement bubble sort in parallel
def Parallel_bubble_sort(lst):
    # Variable to keep track of swaps to end the while loop
    Sorted = 0
    # Variable to get length of list
    n = len(lst)

    # Loop to traverse all list elements in phases
    while Sorted == 0:
        # Set to 1 initially to assume list is sorted and no swaps occurred
        Sorted = 1

        # Traverse all list elements in pairs
        # Start at index 0 for odd phase
        # Start at index 1 for even phase
        for i in range(0, n-1, 2):
            # Check if current element is greater than the next element
            if lst[i] > lst[i+1]:
                # If so, swap the elements
                lst[i], lst[i+1] = lst[i+1], lst[i]
                # Set to 0 to imply a swap occurred
                Sorted = 0

        for i in range(1, n-1, 2):
            if lst[i] > lst[i+1]:
                lst[i], lst[i+1] = lst[i+1], lst[i]
                Sorted = 0

    # Print the final sorted list
    print(lst)

# An example list to test the above program
lst = [random.randint(0, 100) for i in range(100)]
Parallel_bubble_sort(lst)

finish = time.perf_counter()
print(f'Finished in {round(finish-start, 2)} second(s)')












/////////////////////



[0, 1, 1, 3, 3, 5, 6, 8, 8, 9, 11, 12, 12, 13, 14, 16, 16, 16, 17, 18, 19, 19, 19, 20, 20, 22, 24, 25, 25, 26, 27, 27, 27, 29, 29, 30, 31, 32, 34, 34, 35, 35, 35, 36, 36, 37, 38, 39, 40, 41, 41, 42, 43, 45, 45, 46, 47, 47, 49, 50, 50, 50, 51, 52, 52, 52, 53, 54, 54, 55, 55, 56, 57, 58, 58, 59, 61, 63, 63, 64, 65, 65, 66, 66, 67, 69, 69, 70, 71, 72, 73, 74, 75, 76, 78, 78, 79, 79, 79, 80, 80, 80, 82, 82, 84, 84, 85, 85, 85, 87, 87, 88, 88, 89, 89, 90, 91, 91, 91, 93, 94, 94, 95, 95, 96, 96, 97, 98, 99]
Finished in 0.01 second(s)

